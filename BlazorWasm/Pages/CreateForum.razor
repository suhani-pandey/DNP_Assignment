@inject IForumService ForumService;
@* @page "/CreateForum" *@
@page "/CreateForum"
@using Domain
@using HttpClient.ClientInterface
@inject NavigationManager navMgr
@inject AuthenticationStateProvider context;

<AuthorizeView>
    <Authorized>
        <div class="container-fluid  my-5 mx-5">
            <div class="card w-50 ">
                <div class="card-header h3" style="background-color: #2002">
                    Share your ideas..
                </div>
                <div class="mb-3">
                    <label for="exampleFormControlTextarea1" class="form-label h5 my-2">Title</label>
                    <textarea class="form-control" id="exampleFormControlTextarea1" rows="1" @bind="ForumTitle"></textarea>
                </div>
                
                <div class="mb-3">
                  <label for="exampleFormControlTextarea1" class="form-label h5">Share Your thoughts</label>
                  <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="Description"></textarea>
                </div>
                
                @if (!string.IsNullOrEmpty(msg))
                {
                    <label style="color: @color">@msg</label>
                }
                <button type="button" class="btn btn-primary" data-toggle="button" aria-pressed="false" autocomplete="off" @onclick="Create">
                  Create
                </button>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="card mx-auto my-5">
            <div class="card-body">
                You need to login first!
            </div>
            <div class="card-footer button mx-5">
                <button class=" justify-content-center border-0" @onclick="GoToLogin">Login</button>
            </div>
            
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {

    private IEnumerable<Forum> forums;
    private string msg = "";
    private string ForumTitle = "";
    private string Description = "";
    private string color = "";
    private string? createdBy;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await context.GetAuthenticationStateAsync();
        // createdBy = state.User.Identity!.Name;
        createdBy = state.User.Identity!.Name;
    }
    

    private async Task Create()
    {
        msg = "";
        try
        {
            if (string.IsNullOrEmpty(ForumTitle) || string.IsNullOrEmpty(Description))
            {
                throw new Exception("Empty field Not Allowed!!");
            }
            await ForumService.CreateForum(new Forum(ForumTitle,Description,createdBy));
            ForumTitle = "";
            Description = "";
            msg = "Forum successfully created";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void GoToLogin()
    {
        navMgr.NavigateTo("/Login");
    }
    
}